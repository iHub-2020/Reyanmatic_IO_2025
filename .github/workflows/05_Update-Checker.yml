#=================================================
# Description: Update-Checker for coolsnowwolf/lede.
#              Triggers Multi-Platform Build based on defined schedule and updates.
# License: MIT
# Author: Reyanmatic
# Website: https://www.reyanmatic.com
#=================================================

name: 05_Update_Checker

# [2025-08-10] 修改: 显式声明权限，便于（将来如切换到 GITHUB_TOKEN 时）具备写权限；对使用 PAT 不冲突
permissions:
  contents: write # [2025-08-10] 修改: 允许写入内容（Release/Tag等）
  actions: write  # [2025-08-10] 修改: 允许调用 repository_dispatch、删除 workflow runs

env:
  REPO_URL: https://github.com/coolsnowwolf/lede # 上游源码仓库 URL
  REPO_BRANCH: master # 上游源码仓库分支
  TARGET_EVENT_TYPE: Build_OpenWrt_Matrix # 目标工作流的 repository_dispatch event type

on:
  workflow_dispatch:   # 允许手动触发此检查器
  schedule:
    # CRON 表达式使用 UTC 时间
    # 每周五 00:00 UTC (用于"每两周"的逻辑判断 - 选择奇数周的周五执行检查)
    - cron: '0 0 * * 5'
    # 每月1号 00:00 UTC 强制触发构建
    - cron: '0 0 1 * *'

jobs:
  check_and_trigger_build:
    runs-on: ubuntu-latest
    outputs:
      triggered_build: ${{ steps.dispatch.outputs.triggered || 'false' }}
      trigger_reason: ${{ steps.trigger_logic.outputs.reason }}
      checked_commit_hash: ${{ steps.getHash.outputs.commitHash || 'N/A (check not performed)' }}

    steps:
      # 1. 判断当前触发类型和条件，决定后续操作
      - name: Determine Trigger Logic and Conditions
        id: trigger_logic
        run: |
          TRIGGER_REASON="N/A"
          SHOULD_CHECK_UPSTREAM=false

          echo "Current event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TRIGGER_REASON="Manual Trigger"
            SHOULD_CHECK_UPSTREAM=true
            echo "==> Logic: Manual dispatch. Will check upstream and then trigger build."

          elif [ "${{ github.event_name }}" == "schedule" ]; then
            SCHEDULED_CRON="${{ github.event.schedule }}"
            echo "==> Logic: Scheduled dispatch via cron: $SCHEDULED_CRON"

            if [ "$SCHEDULED_CRON" == "0 0 * * 5" ]; then # 每周五 (用于双周检查)
              WEEK_NUM=$(date -u +%V)
              if [ $((WEEK_NUM % 2)) -ne 0 ]; then # 如果是奇数周
                TRIGGER_REASON="Bi-weekly Check (Odd Week Friday) - Pending Upstream Update"
                SHOULD_CHECK_UPSTREAM=true
                echo "==> Logic: Target Friday (Odd Week #$WEEK_NUM) for bi-weekly check. Will check upstream."
              else
                TRIGGER_REASON="Bi-weekly Check (Even Week Friday) - Skipped"
                echo "==> Logic: Not a target Friday (Even Week #$WEEK_NUM). No action for upstream check."
              fi
            elif [ "$SCHEDULED_CRON" == "0 0 1 * *" ]; then # 每月1号 (用于强制构建)
              TRIGGER_REASON="Monthly Force Trigger (1st of Month)"
              SHOULD_CHECK_UPSTREAM=false # 每月1号强制构建，无需检查上游
              echo "==> Logic: First day of month detected. Will force build."
            fi
          fi

          echo "reason=$TRIGGER_REASON" >> $GITHUB_OUTPUT
          echo "should_check_upstream=$SHOULD_CHECK_UPSTREAM" >> $GITHUB_OUTPUT

      # 2. 拉取上游源码并获取最新的 commit hash (如果需要检查上游)
      - name: Get Latest Commit Hash from Upstream
        id: getHash
        if: steps.trigger_logic.outputs.should_check_upstream == 'true'
        run: |
          echo "Cloning $REPO_URL branch $REPO_BRANCH..."
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH upstream_repo
          cd upstream_repo
          CURRENT_HASH=$(git rev-parse HEAD)
          echo "Latest commit hash from upstream: $CURRENT_HASH"
          echo "commitHash=$CURRENT_HASH" >> $GITHUB_OUTPUT
          cd ..
          rm -rf upstream_repo

      # 3. 使用 actions/cache 缓存 commit hash，用于对比变化 (如果需要检查上游)
      - name: Compare with Cached Commit Hash
        id: cacheHash
        if: steps.trigger_logic.outputs.should_check_upstream == 'true'
        uses: actions/cache@v4
        with:
          path: .commitHash_coolsnowwolf_lede
          key: upstream-coolsnowwolf-lede-HEAD-${{ steps.getHash.outputs.commitHash }}

      # 4. 如果检测到更新 (cache miss)，则保存新的 commit hash 到缓存文件 (如果需要检查上游)
      - name: Save New Commit Hash if Update Detected
        if: steps.trigger_logic.outputs.should_check_upstream == 'true' && steps.cacheHash.outputs.cache-hit != 'true'
        run: |
          echo "Upstream update detected (or first run). Saving new hash ${{ steps.getHash.outputs.commitHash }} for caching."
          echo "${{ steps.getHash.outputs.commitHash }}" > .commitHash_coolsnowwolf_lede

      # 5. 根据逻辑判断是否触发构建，并执行 repository dispatch
      - name: Decide and Trigger Multi-Platform Build Workflow
        id: dispatch
        if: |
          (steps.trigger_logic.outputs.reason == 'Manual Trigger') ||
          (contains(steps.trigger_logic.outputs.reason, 'Bi-weekly Check (Odd Week Friday)') && steps.cacheHash.outputs.cache-hit != 'true') ||
          (steps.trigger_logic.outputs.reason == 'Monthly Force Trigger (1st of Month)')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_RELEASE_TOKEN }} # [2025-08-10] 修改: 强制使用 PAT（GH_RELEASE_TOKEN）
          repository: ${{ github.repository }}
          event-type: ${{ env.TARGET_EVENT_TYPE }}
          client-payload: >
            {
              "trigger_reason": "${{ steps.trigger_logic.outputs.reason }}",
              "upstream_commit_hash": "${{ steps.getHash.outputs.commitHash || 'N/A (check not performed)' }}",
              "cache_hit_on_check": "${{ steps.cacheHash.outputs.cache-hit || 'N/A (check not performed or cache failed)' }}"
            }

      # 6. 自动清理此 Update-Checker 工作流的历史运行记录
      - name: Delete old workflow runs for this checker
        if: always()
        continue-on-error: true # [2025-08-10] 修改: 清理失败不阻断整体状态
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GH_RELEASE_TOKEN }} # [2025-08-10] 修改: 显式通过 with 传 PAT
          repository: ${{ github.repository }}   # [2025-08-10] 修改: 显式指向当前仓库
          retain_days: 0
          keep_minimum_runs: 3 # 保留此检查器工作流的最近3次运行
          # [2025-08-10] 修改: 使用工作流“名称”匹配，而非文件名，提升匹配准确度
          delete_workflow_pattern: "05_Update_Checker"
